// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer.EntityFramework.Context;

namespace WebApi.Migrations
{
    [DbContext(typeof(TaskboardContext))]
    partial class TaskboardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModels.Models.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<long>("CreatedById")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("BOARDS");
                });

            modelBuilder.Entity("DomainModels.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BoardId")
                        .HasColumnName("BOARD_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<long>("CreatedById")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("NOTES");
                });

            modelBuilder.Entity("DomainModels.Models.Subtask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnName("COMPLETED");

                    b.Property<long>("CompletedById")
                        .HasColumnName("COMPLETED_BY");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<long>("CreatedById")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.Property<long>("TaskId")
                        .HasColumnName("TASK_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaskId");

                    b.ToTable("SUBTASKS");
                });

            modelBuilder.Entity("DomainModels.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BoardId")
                        .HasColumnName("BOARD_ID");

                    b.Property<long?>("BoardId1");

                    b.Property<bool>("Completed")
                        .HasColumnName("COMPLETED");

                    b.Property<long>("CompletedById")
                        .HasColumnName("COMPLETED_BY");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<long>("CreatedById")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("BoardId1");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.ToTable("TASKS");
                });

            modelBuilder.Entity("DomainModels.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(256);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FULL_NAME")
                        .HasMaxLength(256);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("PASSWORD_SALT");

                    b.HasKey("Id");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("DomainModels.Models.UserBoard", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<long>("BoardId")
                        .HasColumnName("BOARD_ID");

                    b.HasKey("UserId", "BoardId");

                    b.HasIndex("BoardId");

                    b.ToTable("USER_BOARDS");
                });

            modelBuilder.Entity("DomainModels.Models.Board", b =>
                {
                    b.HasOne("DomainModels.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainModels.Models.Note", b =>
                {
                    b.HasOne("DomainModels.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainModels.Models.Subtask", b =>
                {
                    b.HasOne("DomainModels.Models.User", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainModels.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainModels.Models.Task", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainModels.Models.Task", b =>
                {
                    b.HasOne("DomainModels.Models.Board", "Board")
                        .WithMany("Tasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainModels.Models.Board")
                        .WithMany("Notes")
                        .HasForeignKey("BoardId1");

                    b.HasOne("DomainModels.Models.User", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainModels.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainModels.Models.UserBoard", b =>
                {
                    b.HasOne("DomainModels.Models.Board", "Board")
                        .WithMany("UserBoards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainModels.Models.User", "User")
                        .WithMany("UserBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
